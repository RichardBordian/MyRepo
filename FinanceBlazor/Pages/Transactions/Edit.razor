@page "/Transactions/edit/{id:int}"

<PageTitle>Edit</PageTitle>
<MudText>Edit @transactionInfo?.Name</MudText>
<MudForm @bind-IsValid="@success">
    <MudTextField T="string" Label="Name" @bind-Value="name"/>
    <MudTextField T="double" Label="Price" @bind-Value="price"/>
    <MudDatePicker Label="Date" @bind-Date="date"/>
    <MudTextField T="string" Label="Description" @bind-Value="description" />
    <MudSelect T="int" @bind-value="storageId" Label="Storage" Required="true" RequiredError="storage is required!" AnchorOrigin="Origin.BottomCenter">
        @foreach (var storage in storages)
        {
            <MudSelectItem T="int" value="@storage.Id"> @storage.Name</MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="int" @bind-value="categoryId" Label="Category" Required="true" RequiredError="category is required!" AnchorOrigin="Origin.BottomCenter">
        @foreach (var category in categories)
        {
            <MudSelectItem T="int" value="@category.Id">@category.Name</MudSelectItem>
        }
    </MudSelect>
    <div class="d-flex align-center justify-space-between">
        <MudCheckBox T="bool" Required="true" RequiredError="You must agree!" Label="Agree"/>
        <MudButton Href="/" OnClick="EditButtonClick" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="m1-auto">Edit</MudButton>
    </div>
</MudForm>

@code{
    [Parameter]
    public int id { get; set; }
    private string? name;
    private double price;
    private string? description;
    private int storageId;
    private int categoryId;
    private DateTime? date;
    List<StorageDTO>? storages = new List<StorageDTO>();
    List<CategoryDTO>? categories = new List<CategoryDTO>();
    private TransactionViewDTO? transactionInfo;
    private readonly TransactionServices _transactionServices = new TransactionServices();
    private readonly StorageServices _storageServices = new StorageServices();
    private readonly CategoryServices _categoryServices = new CategoryServices();
    bool success;

    protected override async Task OnInitializedAsync()
    {
        transactionInfo = await _transactionServices.GetByIdAsync(id);
        name = transactionInfo.Name;
        price = transactionInfo.Price;
        date = transactionInfo.Date;
        description = transactionInfo?.Description;
        storageId = transactionInfo.Storage.Id;
        categoryId = transactionInfo.Category.Id;

        storages = await _storageServices.GetAllAsync();
        categories = await _categoryServices.GetAllAsync();
    }

    private async void EditButtonClick()
    {
        var updateData = new TransactionUpdateDTO { Name = name, Price= price, Date = (DateTime)date, Description = description, CategoryId = categoryId, StorageId = storageId, Id = id};
        await _transactionServices.EditAsync(updateData, id);
    }
}